# lextab.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('CPP_AMPERSAND', 'CPP_ANDEQUAL', 'CPP_BAR', 'CPP_BSLASH', 'CPP_CHAR', 'CPP_COLON', 'CPP_COMMA', 'CPP_COMMENT1', 'CPP_COMMENT2', 'CPP_DEREFERENCE', 'CPP_DIRECTIVE', 'CPP_DIVIDEEQUAL', 'CPP_DOT', 'CPP_DPOUND', 'CPP_DQUOTE', 'CPP_ELLIPSIS', 'CPP_EQUAL', 'CPP_EQUALITY', 'CPP_EXCLAMATION', 'CPP_FLOAT', 'CPP_FSLASH', 'CPP_FUNC_MACRO', 'CPP_GREATER', 'CPP_GREATEREQUAL', 'CPP_HAT', 'CPP_H_HEADER_NAME', 'CPP_ID', 'CPP_INEQUALITY', 'CPP_INTEGER', 'CPP_LBRACKET', 'CPP_LCURLY', 'CPP_LESS', 'CPP_LESSEQUAL', 'CPP_LOGICALAND', 'CPP_LOGICALOR', 'CPP_LPAREN', 'CPP_LSHIFT', 'CPP_LSHIFTEQUAL', 'CPP_MINUS', 'CPP_MINUSEQUAL', 'CPP_MINUSMINUS', 'CPP_MULTIPLYEQUAL', 'CPP_NEWLINE', 'CPP_NULL', 'CPP_OBJ_MACRO', 'CPP_OREQUAL', 'CPP_PASTED', 'CPP_PERCENT', 'CPP_PERCENTEQUAL', 'CPP_PLACEMARKER', 'CPP_PLUS', 'CPP_PLUSEQUAL', 'CPP_PLUSPLUS', 'CPP_POUND', 'CPP_QUESTION', 'CPP_Q_HEADER_NAME', 'CPP_RBRACKET', 'CPP_RCURLY', 'CPP_RPAREN', 'CPP_RSHIFT', 'CPP_RSHIFTEQUAL', 'CPP_SEMICOLON', 'CPP_SQUOTE', 'CPP_STAR', 'CPP_STRING', 'CPP_TILDE', 'CPP_WS', 'CPP_XOREQUAL', 'error'))
_lexreflags   = 64
_lexliterals  = '+-*/%|&~^<>=!?()[]{}.,;:\\'
_lexstateinfo = {'INITIAL': 'inclusive', 'DIRECTIVE': 'inclusive', 'INCLUDE': 'inclusive', 'DEFINE': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_ANY_CPP_WS>([ \\t]+))|(?P<t_ANY_CPP_NEWLINE>(\\n))|(?P<t_CPP_DPOUND>\\#\\#|%:%:)|(?P<t_CPP_POUND>\\#|%:)|(?P<t_CPP_FLOAT>((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))?|(\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?)|(?P<t_CPP_INTEGER>(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?))|(?P<t_CPP_STRING>(L|U|u|u8)?\\"[^"\\n]*\\")|(?P<t_CPP_CHAR>(L?\\\'[^\'\\n]*|(U|u|u8)\\\'[^\'\\n])\\\')|(?P<t_CPP_COMMENT1>(/\\*(.|\\n)*?\\*/))|(?P<t_CPP_COMMENT2>(//[^\\n]*))|(?P<t_CPP_ID>[A-Za-z_][\\w_]*)|(?P<t_CPP_ELLIPSIS>\\.\\.\\.)|(?P<t_CPP_LBRACKET>\\[|<:)|(?P<t_CPP_RBRACKET>\\]|:>)|(?P<t_CPP_LCURLY>{|<%)|(?P<t_CPP_RCURLY>}|%>)|(?P<t_CPP_LOGICALOR>\\|\\|)|(?P<t_CPP_PLUSPLUS>\\+\\+)|(?P<t_CPP_OREQUAL>\\|=)|(?P<t_CPP_MULTIPLYEQUAL>\\*=)|(?P<t_CPP_PLUSEQUAL>\\+=)|(?P<t_CPP_LSHIFTEQUAL><<=)|(?P<t_CPP_RSHIFTEQUAL>>>=)|(?P<t_CPP_PLUS>\\+)|(?P<t_CPP_STAR>\\*)|(?P<t_CPP_BAR>\\|)|(?P<t_CPP_HAT>\\^)|(?P<t_CPP_QUESTION>\\?)|(?P<t_CPP_LPAREN>\\()|(?P<t_CPP_RPAREN>\\))|(?P<t_CPP_DOT>\\.)|(?P<t_CPP_BSLASH>\\\\)|(?P<t_CPP_DEREFERENCE>->)|(?P<t_CPP_MINUSEQUAL>-=)|(?P<t_CPP_MINUSMINUS>--)|(?P<t_CPP_LSHIFT><<)|(?P<t_CPP_LESSEQUAL><=)|(?P<t_CPP_RSHIFT>>>)|(?P<t_CPP_GREATEREQUAL>>=)|(?P<t_CPP_LOGICALAND>&&)|(?P<t_CPP_ANDEQUAL>&=)|(?P<t_CPP_EQUALITY>==)|(?P<t_CPP_INEQUALITY>!=)|(?P<t_CPP_XOREQUAL>^=)|(?P<t_CPP_DIVIDEEQUAL>/=)|(?P<t_CPP_PERCENTEQUAL>%=)|(?P<t_CPP_MINUS>-)|(?P<t_CPP_FSLASH>/)|(?P<t_CPP_PERCENT>%)|(?P<t_CPP_AMPERSAND>&)|(?P<t_CPP_TILDE>~)|(?P<t_CPP_LESS><)|(?P<t_CPP_GREATER>>)|(?P<t_CPP_EQUAL>=)|(?P<t_CPP_EXCLAMATION>!)|(?P<t_CPP_COMMA>,)|(?P<t_CPP_SEMICOLON>;)|(?P<t_CPP_COLON>:)', [None, ('t_ANY_CPP_WS', 'CPP_WS'), None, ('t_ANY_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_CPP_DPOUND', 'CPP_DPOUND'), ('t_CPP_POUND', 'CPP_POUND'), ('t_CPP_FLOAT', 'CPP_FLOAT'), None, None, None, None, None, None, None, None, None, None, ('t_CPP_INTEGER', 'CPP_INTEGER'), None, None, None, None, None, None, None, None, ('t_CPP_STRING', 'CPP_STRING'), None, ('t_CPP_CHAR', 'CPP_CHAR'), None, None, ('t_CPP_COMMENT1', 'CPP_COMMENT1'), None, None, ('t_CPP_COMMENT2', 'CPP_COMMENT2'), None, (None, 'CPP_ID'), (None, 'CPP_ELLIPSIS'), (None, 'CPP_LBRACKET'), (None, 'CPP_RBRACKET'), (None, 'CPP_LCURLY'), (None, 'CPP_RCURLY'), (None, 'CPP_LOGICALOR'), (None, 'CPP_PLUSPLUS'), (None, 'CPP_OREQUAL'), (None, 'CPP_MULTIPLYEQUAL'), (None, 'CPP_PLUSEQUAL'), (None, 'CPP_LSHIFTEQUAL'), (None, 'CPP_RSHIFTEQUAL'), (None, 'CPP_PLUS'), (None, 'CPP_STAR'), (None, 'CPP_BAR'), (None, 'CPP_HAT'), (None, 'CPP_QUESTION'), (None, 'CPP_LPAREN'), (None, 'CPP_RPAREN'), (None, 'CPP_DOT'), (None, 'CPP_BSLASH'), (None, 'CPP_DEREFERENCE'), (None, 'CPP_MINUSEQUAL'), (None, 'CPP_MINUSMINUS'), (None, 'CPP_LSHIFT'), (None, 'CPP_LESSEQUAL'), (None, 'CPP_RSHIFT'), (None, 'CPP_GREATEREQUAL'), (None, 'CPP_LOGICALAND'), (None, 'CPP_ANDEQUAL'), (None, 'CPP_EQUALITY'), (None, 'CPP_INEQUALITY'), (None, 'CPP_XOREQUAL'), (None, 'CPP_DIVIDEEQUAL'), (None, 'CPP_PERCENTEQUAL'), (None, 'CPP_MINUS'), (None, 'CPP_FSLASH'), (None, 'CPP_PERCENT'), (None, 'CPP_AMPERSAND'), (None, 'CPP_TILDE'), (None, 'CPP_LESS'), (None, 'CPP_GREATER'), (None, 'CPP_EQUAL'), (None, 'CPP_EXCLAMATION'), (None, 'CPP_COMMA'), (None, 'CPP_SEMICOLON'), (None, 'CPP_COLON')])], 'DIRECTIVE': [('(?P<t_ANY_CPP_WS>([ \\t]+))|(?P<t_DIRECTIVE_INCLUDE_DEFINE_CPP_NEWLINE>(\\n))|(?P<t_ANY_CPP_NEWLINE>(\\n))|(?P<t_DIRECTIVE_CPP_ID>[A-Za-z_][\\w_]*)', [None, ('t_ANY_CPP_WS', 'CPP_WS'), None, ('t_DIRECTIVE_INCLUDE_DEFINE_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_ANY_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_DIRECTIVE_CPP_ID', 'CPP_ID')]), ('(?P<t_ANY_CPP_WS>([ \\t]+))|(?P<t_ANY_CPP_NEWLINE>(\\n))|(?P<t_CPP_DPOUND>\\#\\#|%:%:)|(?P<t_CPP_POUND>\\#|%:)|(?P<t_CPP_FLOAT>((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))?|(\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?)|(?P<t_CPP_INTEGER>(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?))|(?P<t_CPP_STRING>(L|U|u|u8)?\\"[^"\\n]*\\")|(?P<t_CPP_CHAR>(L?\\\'[^\'\\n]*|(U|u|u8)\\\'[^\'\\n])\\\')|(?P<t_CPP_COMMENT1>(/\\*(.|\\n)*?\\*/))|(?P<t_CPP_COMMENT2>(//[^\\n]*))|(?P<t_CPP_ID>[A-Za-z_][\\w_]*)|(?P<t_CPP_ELLIPSIS>\\.\\.\\.)|(?P<t_CPP_LBRACKET>\\[|<:)|(?P<t_CPP_RBRACKET>\\]|:>)|(?P<t_CPP_LCURLY>{|<%)|(?P<t_CPP_RCURLY>}|%>)|(?P<t_CPP_LOGICALOR>\\|\\|)|(?P<t_CPP_PLUSPLUS>\\+\\+)|(?P<t_CPP_OREQUAL>\\|=)|(?P<t_CPP_MULTIPLYEQUAL>\\*=)|(?P<t_CPP_PLUSEQUAL>\\+=)|(?P<t_CPP_LSHIFTEQUAL><<=)|(?P<t_CPP_RSHIFTEQUAL>>>=)|(?P<t_CPP_PLUS>\\+)|(?P<t_CPP_STAR>\\*)|(?P<t_CPP_BAR>\\|)|(?P<t_CPP_HAT>\\^)|(?P<t_CPP_QUESTION>\\?)|(?P<t_CPP_LPAREN>\\()|(?P<t_CPP_RPAREN>\\))|(?P<t_CPP_DOT>\\.)|(?P<t_CPP_BSLASH>\\\\)|(?P<t_CPP_DEREFERENCE>->)|(?P<t_CPP_MINUSEQUAL>-=)|(?P<t_CPP_MINUSMINUS>--)|(?P<t_CPP_LSHIFT><<)|(?P<t_CPP_LESSEQUAL><=)|(?P<t_CPP_RSHIFT>>>)|(?P<t_CPP_GREATEREQUAL>>=)|(?P<t_CPP_LOGICALAND>&&)|(?P<t_CPP_ANDEQUAL>&=)|(?P<t_CPP_EQUALITY>==)|(?P<t_CPP_INEQUALITY>!=)|(?P<t_CPP_XOREQUAL>^=)|(?P<t_CPP_DIVIDEEQUAL>/=)|(?P<t_CPP_PERCENTEQUAL>%=)|(?P<t_CPP_MINUS>-)|(?P<t_CPP_FSLASH>/)|(?P<t_CPP_PERCENT>%)|(?P<t_CPP_AMPERSAND>&)|(?P<t_CPP_TILDE>~)|(?P<t_CPP_LESS><)|(?P<t_CPP_GREATER>>)|(?P<t_CPP_EQUAL>=)|(?P<t_CPP_EXCLAMATION>!)|(?P<t_CPP_COMMA>,)|(?P<t_CPP_SEMICOLON>;)|(?P<t_CPP_COLON>:)', [None, ('t_ANY_CPP_WS', 'CPP_WS'), None, ('t_ANY_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_CPP_DPOUND', 'CPP_DPOUND'), ('t_CPP_POUND', 'CPP_POUND'), ('t_CPP_FLOAT', 'CPP_FLOAT'), None, None, None, None, None, None, None, None, None, None, ('t_CPP_INTEGER', 'CPP_INTEGER'), None, None, None, None, None, None, None, None, ('t_CPP_STRING', 'CPP_STRING'), None, ('t_CPP_CHAR', 'CPP_CHAR'), None, None, ('t_CPP_COMMENT1', 'CPP_COMMENT1'), None, None, ('t_CPP_COMMENT2', 'CPP_COMMENT2'), None, (None, 'CPP_ID'), (None, 'CPP_ELLIPSIS'), (None, 'CPP_LBRACKET'), (None, 'CPP_RBRACKET'), (None, 'CPP_LCURLY'), (None, 'CPP_RCURLY'), (None, 'CPP_LOGICALOR'), (None, 'CPP_PLUSPLUS'), (None, 'CPP_OREQUAL'), (None, 'CPP_MULTIPLYEQUAL'), (None, 'CPP_PLUSEQUAL'), (None, 'CPP_LSHIFTEQUAL'), (None, 'CPP_RSHIFTEQUAL'), (None, 'CPP_PLUS'), (None, 'CPP_STAR'), (None, 'CPP_BAR'), (None, 'CPP_HAT'), (None, 'CPP_QUESTION'), (None, 'CPP_LPAREN'), (None, 'CPP_RPAREN'), (None, 'CPP_DOT'), (None, 'CPP_BSLASH'), (None, 'CPP_DEREFERENCE'), (None, 'CPP_MINUSEQUAL'), (None, 'CPP_MINUSMINUS'), (None, 'CPP_LSHIFT'), (None, 'CPP_LESSEQUAL'), (None, 'CPP_RSHIFT'), (None, 'CPP_GREATEREQUAL'), (None, 'CPP_LOGICALAND'), (None, 'CPP_ANDEQUAL'), (None, 'CPP_EQUALITY'), (None, 'CPP_INEQUALITY'), (None, 'CPP_XOREQUAL'), (None, 'CPP_DIVIDEEQUAL'), (None, 'CPP_PERCENTEQUAL'), (None, 'CPP_MINUS'), (None, 'CPP_FSLASH'), (None, 'CPP_PERCENT'), (None, 'CPP_AMPERSAND'), (None, 'CPP_TILDE'), (None, 'CPP_LESS'), (None, 'CPP_GREATER'), (None, 'CPP_EQUAL'), (None, 'CPP_EXCLAMATION'), (None, 'CPP_COMMA'), (None, 'CPP_SEMICOLON'), (None, 'CPP_COLON')])], 'INCLUDE': [('(?P<t_ANY_CPP_WS>([ \\t]+))|(?P<t_DIRECTIVE_INCLUDE_DEFINE_CPP_NEWLINE>(\\n))|(?P<t_ANY_CPP_NEWLINE>(\\n))|(?P<t_INCLUDE_CPP_H_HEADER_NAME><([^>\\n])*>)', [None, ('t_ANY_CPP_WS', 'CPP_WS'), None, ('t_DIRECTIVE_INCLUDE_DEFINE_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_ANY_CPP_NEWLINE', 'CPP_NEWLINE'), None, (None, 'CPP_H_HEADER_NAME')]), ('(?P<t_ANY_CPP_WS>([ \\t]+))|(?P<t_ANY_CPP_NEWLINE>(\\n))|(?P<t_CPP_DPOUND>\\#\\#|%:%:)|(?P<t_CPP_POUND>\\#|%:)|(?P<t_CPP_FLOAT>((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))?|(\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?)|(?P<t_CPP_INTEGER>(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?))|(?P<t_CPP_STRING>(L|U|u|u8)?\\"[^"\\n]*\\")|(?P<t_CPP_CHAR>(L?\\\'[^\'\\n]*|(U|u|u8)\\\'[^\'\\n])\\\')|(?P<t_CPP_COMMENT1>(/\\*(.|\\n)*?\\*/))|(?P<t_CPP_COMMENT2>(//[^\\n]*))|(?P<t_CPP_ID>[A-Za-z_][\\w_]*)|(?P<t_CPP_ELLIPSIS>\\.\\.\\.)|(?P<t_CPP_LBRACKET>\\[|<:)|(?P<t_CPP_RBRACKET>\\]|:>)|(?P<t_CPP_LCURLY>{|<%)|(?P<t_CPP_RCURLY>}|%>)|(?P<t_CPP_LOGICALOR>\\|\\|)|(?P<t_CPP_PLUSPLUS>\\+\\+)|(?P<t_CPP_OREQUAL>\\|=)|(?P<t_CPP_MULTIPLYEQUAL>\\*=)|(?P<t_CPP_PLUSEQUAL>\\+=)|(?P<t_CPP_LSHIFTEQUAL><<=)|(?P<t_CPP_RSHIFTEQUAL>>>=)|(?P<t_CPP_PLUS>\\+)|(?P<t_CPP_STAR>\\*)|(?P<t_CPP_BAR>\\|)|(?P<t_CPP_HAT>\\^)|(?P<t_CPP_QUESTION>\\?)|(?P<t_CPP_LPAREN>\\()|(?P<t_CPP_RPAREN>\\))|(?P<t_CPP_DOT>\\.)|(?P<t_CPP_BSLASH>\\\\)|(?P<t_CPP_DEREFERENCE>->)|(?P<t_CPP_MINUSEQUAL>-=)|(?P<t_CPP_MINUSMINUS>--)|(?P<t_CPP_LSHIFT><<)|(?P<t_CPP_LESSEQUAL><=)|(?P<t_CPP_RSHIFT>>>)|(?P<t_CPP_GREATEREQUAL>>=)|(?P<t_CPP_LOGICALAND>&&)|(?P<t_CPP_ANDEQUAL>&=)|(?P<t_CPP_EQUALITY>==)|(?P<t_CPP_INEQUALITY>!=)|(?P<t_CPP_XOREQUAL>^=)|(?P<t_CPP_DIVIDEEQUAL>/=)|(?P<t_CPP_PERCENTEQUAL>%=)|(?P<t_CPP_MINUS>-)|(?P<t_CPP_FSLASH>/)|(?P<t_CPP_PERCENT>%)|(?P<t_CPP_AMPERSAND>&)|(?P<t_CPP_TILDE>~)|(?P<t_CPP_LESS><)|(?P<t_CPP_GREATER>>)|(?P<t_CPP_EQUAL>=)|(?P<t_CPP_EXCLAMATION>!)|(?P<t_CPP_COMMA>,)|(?P<t_CPP_SEMICOLON>;)|(?P<t_CPP_COLON>:)', [None, ('t_ANY_CPP_WS', 'CPP_WS'), None, ('t_ANY_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_CPP_DPOUND', 'CPP_DPOUND'), ('t_CPP_POUND', 'CPP_POUND'), ('t_CPP_FLOAT', 'CPP_FLOAT'), None, None, None, None, None, None, None, None, None, None, ('t_CPP_INTEGER', 'CPP_INTEGER'), None, None, None, None, None, None, None, None, ('t_CPP_STRING', 'CPP_STRING'), None, ('t_CPP_CHAR', 'CPP_CHAR'), None, None, ('t_CPP_COMMENT1', 'CPP_COMMENT1'), None, None, ('t_CPP_COMMENT2', 'CPP_COMMENT2'), None, (None, 'CPP_ID'), (None, 'CPP_ELLIPSIS'), (None, 'CPP_LBRACKET'), (None, 'CPP_RBRACKET'), (None, 'CPP_LCURLY'), (None, 'CPP_RCURLY'), (None, 'CPP_LOGICALOR'), (None, 'CPP_PLUSPLUS'), (None, 'CPP_OREQUAL'), (None, 'CPP_MULTIPLYEQUAL'), (None, 'CPP_PLUSEQUAL'), (None, 'CPP_LSHIFTEQUAL'), (None, 'CPP_RSHIFTEQUAL'), (None, 'CPP_PLUS'), (None, 'CPP_STAR'), (None, 'CPP_BAR'), (None, 'CPP_HAT'), (None, 'CPP_QUESTION'), (None, 'CPP_LPAREN'), (None, 'CPP_RPAREN'), (None, 'CPP_DOT'), (None, 'CPP_BSLASH'), (None, 'CPP_DEREFERENCE'), (None, 'CPP_MINUSEQUAL'), (None, 'CPP_MINUSMINUS'), (None, 'CPP_LSHIFT'), (None, 'CPP_LESSEQUAL'), (None, 'CPP_RSHIFT'), (None, 'CPP_GREATEREQUAL'), (None, 'CPP_LOGICALAND'), (None, 'CPP_ANDEQUAL'), (None, 'CPP_EQUALITY'), (None, 'CPP_INEQUALITY'), (None, 'CPP_XOREQUAL'), (None, 'CPP_DIVIDEEQUAL'), (None, 'CPP_PERCENTEQUAL'), (None, 'CPP_MINUS'), (None, 'CPP_FSLASH'), (None, 'CPP_PERCENT'), (None, 'CPP_AMPERSAND'), (None, 'CPP_TILDE'), (None, 'CPP_LESS'), (None, 'CPP_GREATER'), (None, 'CPP_EQUAL'), (None, 'CPP_EXCLAMATION'), (None, 'CPP_COMMA'), (None, 'CPP_SEMICOLON'), (None, 'CPP_COLON')])], 'DEFINE': [('(?P<t_ANY_CPP_WS>([ \\t]+))|(?P<t_DIRECTIVE_INCLUDE_DEFINE_CPP_NEWLINE>(\\n))|(?P<t_ANY_CPP_NEWLINE>(\\n))|(?P<t_DEFINE_CPP_FUNC_MACRO>[A-Za-z_][\\w_]*(?=\\())|(?P<t_DEFINE_CPP_OBJ_MACRO>[A-Za-z_][\\w_]*)', [None, ('t_ANY_CPP_WS', 'CPP_WS'), None, ('t_DIRECTIVE_INCLUDE_DEFINE_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_ANY_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_DEFINE_CPP_FUNC_MACRO', 'CPP_FUNC_MACRO'), ('t_DEFINE_CPP_OBJ_MACRO', 'CPP_OBJ_MACRO')]), ('(?P<t_ANY_CPP_WS>([ \\t]+))|(?P<t_ANY_CPP_NEWLINE>(\\n))|(?P<t_CPP_DPOUND>\\#\\#|%:%:)|(?P<t_CPP_POUND>\\#|%:)|(?P<t_CPP_FLOAT>((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))?|(\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?)|(?P<t_CPP_INTEGER>(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?))|(?P<t_CPP_STRING>(L|U|u|u8)?\\"[^"\\n]*\\")|(?P<t_CPP_CHAR>(L?\\\'[^\'\\n]*|(U|u|u8)\\\'[^\'\\n])\\\')|(?P<t_CPP_COMMENT1>(/\\*(.|\\n)*?\\*/))|(?P<t_CPP_COMMENT2>(//[^\\n]*))|(?P<t_CPP_ID>[A-Za-z_][\\w_]*)|(?P<t_CPP_ELLIPSIS>\\.\\.\\.)|(?P<t_CPP_LBRACKET>\\[|<:)|(?P<t_CPP_RBRACKET>\\]|:>)|(?P<t_CPP_LCURLY>{|<%)|(?P<t_CPP_RCURLY>}|%>)|(?P<t_CPP_LOGICALOR>\\|\\|)|(?P<t_CPP_PLUSPLUS>\\+\\+)|(?P<t_CPP_OREQUAL>\\|=)|(?P<t_CPP_MULTIPLYEQUAL>\\*=)|(?P<t_CPP_PLUSEQUAL>\\+=)|(?P<t_CPP_LSHIFTEQUAL><<=)|(?P<t_CPP_RSHIFTEQUAL>>>=)|(?P<t_CPP_PLUS>\\+)|(?P<t_CPP_STAR>\\*)|(?P<t_CPP_BAR>\\|)|(?P<t_CPP_HAT>\\^)|(?P<t_CPP_QUESTION>\\?)|(?P<t_CPP_LPAREN>\\()|(?P<t_CPP_RPAREN>\\))|(?P<t_CPP_DOT>\\.)|(?P<t_CPP_BSLASH>\\\\)|(?P<t_CPP_DEREFERENCE>->)|(?P<t_CPP_MINUSEQUAL>-=)|(?P<t_CPP_MINUSMINUS>--)|(?P<t_CPP_LSHIFT><<)|(?P<t_CPP_LESSEQUAL><=)|(?P<t_CPP_RSHIFT>>>)|(?P<t_CPP_GREATEREQUAL>>=)|(?P<t_CPP_LOGICALAND>&&)|(?P<t_CPP_ANDEQUAL>&=)|(?P<t_CPP_EQUALITY>==)|(?P<t_CPP_INEQUALITY>!=)|(?P<t_CPP_XOREQUAL>^=)|(?P<t_CPP_DIVIDEEQUAL>/=)|(?P<t_CPP_PERCENTEQUAL>%=)|(?P<t_CPP_MINUS>-)|(?P<t_CPP_FSLASH>/)|(?P<t_CPP_PERCENT>%)|(?P<t_CPP_AMPERSAND>&)|(?P<t_CPP_TILDE>~)|(?P<t_CPP_LESS><)|(?P<t_CPP_GREATER>>)|(?P<t_CPP_EQUAL>=)|(?P<t_CPP_EXCLAMATION>!)|(?P<t_CPP_COMMA>,)|(?P<t_CPP_SEMICOLON>;)|(?P<t_CPP_COLON>:)', [None, ('t_ANY_CPP_WS', 'CPP_WS'), None, ('t_ANY_CPP_NEWLINE', 'CPP_NEWLINE'), None, ('t_CPP_DPOUND', 'CPP_DPOUND'), ('t_CPP_POUND', 'CPP_POUND'), ('t_CPP_FLOAT', 'CPP_FLOAT'), None, None, None, None, None, None, None, None, None, None, ('t_CPP_INTEGER', 'CPP_INTEGER'), None, None, None, None, None, None, None, None, ('t_CPP_STRING', 'CPP_STRING'), None, ('t_CPP_CHAR', 'CPP_CHAR'), None, None, ('t_CPP_COMMENT1', 'CPP_COMMENT1'), None, None, ('t_CPP_COMMENT2', 'CPP_COMMENT2'), None, (None, 'CPP_ID'), (None, 'CPP_ELLIPSIS'), (None, 'CPP_LBRACKET'), (None, 'CPP_RBRACKET'), (None, 'CPP_LCURLY'), (None, 'CPP_RCURLY'), (None, 'CPP_LOGICALOR'), (None, 'CPP_PLUSPLUS'), (None, 'CPP_OREQUAL'), (None, 'CPP_MULTIPLYEQUAL'), (None, 'CPP_PLUSEQUAL'), (None, 'CPP_LSHIFTEQUAL'), (None, 'CPP_RSHIFTEQUAL'), (None, 'CPP_PLUS'), (None, 'CPP_STAR'), (None, 'CPP_BAR'), (None, 'CPP_HAT'), (None, 'CPP_QUESTION'), (None, 'CPP_LPAREN'), (None, 'CPP_RPAREN'), (None, 'CPP_DOT'), (None, 'CPP_BSLASH'), (None, 'CPP_DEREFERENCE'), (None, 'CPP_MINUSEQUAL'), (None, 'CPP_MINUSMINUS'), (None, 'CPP_LSHIFT'), (None, 'CPP_LESSEQUAL'), (None, 'CPP_RSHIFT'), (None, 'CPP_GREATEREQUAL'), (None, 'CPP_LOGICALAND'), (None, 'CPP_ANDEQUAL'), (None, 'CPP_EQUALITY'), (None, 'CPP_INEQUALITY'), (None, 'CPP_XOREQUAL'), (None, 'CPP_DIVIDEEQUAL'), (None, 'CPP_PERCENTEQUAL'), (None, 'CPP_MINUS'), (None, 'CPP_FSLASH'), (None, 'CPP_PERCENT'), (None, 'CPP_AMPERSAND'), (None, 'CPP_TILDE'), (None, 'CPP_LESS'), (None, 'CPP_GREATER'), (None, 'CPP_EQUAL'), (None, 'CPP_EXCLAMATION'), (None, 'CPP_COMMA'), (None, 'CPP_SEMICOLON'), (None, 'CPP_COLON')])]}
_lexstateignore = {'INITIAL': '', 'DIRECTIVE': '', 'INCLUDE': '', 'DEFINE': ''}
_lexstateerrorf = {'INITIAL': 't_ANY_error', 'DIRECTIVE': 't_ANY_error', 'INCLUDE': 't_ANY_error', 'DEFINE': 't_ANY_error'}
_lexstateeoff = {}
