#!/usr/bin/env python3.8
# @generated by pegen from test_rec.gram

from __future__ import annotations

import ast
import sys
import tokenize

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger, Parser, cut_sentinel
# Keywords and soft keywords are listed at the end of the parser definition.
class GeneratedParser(Parser):

    def start(self) -> ParseResult[list]:
        # start: rec2
        def _alt():
            # rec2
            def _item_rec2_var():
                return self.rec2()
            rec2_var: list; _result_rec2_var: ParseResult[list]
            _result_rec2_var = _item_rec2_var()
            if not _result_rec2_var: return None
            rec2_var, = _result_rec2_var
            # parse succeeded
            return (rec2_var),
        return self._alt(_alt)

    @memoize_left_rec
    def rec1(self) -> ParseResult[list]:
        # rec1: rec2 prim | prim
        def _alt_1():
            # rec2
            def _item_rec2_var():
                return self.rec2()
            rec2_var: list; _result_rec2_var: ParseResult[list]
            _result_rec2_var = _item_rec2_var()
            if not _result_rec2_var: return None
            rec2_var, = _result_rec2_var
            # prim
            def _item_prim_var():
                return self.prim()
            prim_var: Any; _result_prim_var: ParseResult[Any]
            _result_prim_var = _item_prim_var()
            if not _result_prim_var: return None
            prim_var, = _result_prim_var
            # parse succeeded
            return ([rec2_var, prim_var]),
        def _alt_2():
            # prim
            def _item_prim_var():
                return self.prim()
            prim_var: Any; _result_prim_var: ParseResult[Any]
            _result_prim_var = _item_prim_var()
            if not _result_prim_var: return None
            prim_var, = _result_prim_var
            # parse succeeded
            return (prim_var),
        return self._alts(_alt_1, _alt_2)

    @logger
    def rec2(self) -> ParseResult[list]:
        # rec2: rec3 prim | prim
        def _alt_1():
            # rec3
            def _item_rec3_var():
                return self.rec3()
            rec3_var: list; _result_rec3_var: ParseResult[list]
            _result_rec3_var = _item_rec3_var()
            if not _result_rec3_var: return None
            rec3_var, = _result_rec3_var
            # prim
            def _item_prim_var():
                return self.prim()
            prim_var: Any; _result_prim_var: ParseResult[Any]
            _result_prim_var = _item_prim_var()
            if not _result_prim_var: return None
            prim_var, = _result_prim_var
            # parse succeeded
            return ([rec3_var, prim_var]),
        def _alt_2():
            # prim
            def _item_prim_var():
                return self.prim()
            prim_var: Any; _result_prim_var: ParseResult[Any]
            _result_prim_var = _item_prim_var()
            if not _result_prim_var: return None
            prim_var, = _result_prim_var
            # parse succeeded
            return (prim_var),
        return self._alts(_alt_1, _alt_2)

    @logger
    def rec3(self) -> ParseResult[list]:
        # rec3: rec1 prim | prim
        def _alt_1():
            # rec1
            def _item_rec1_var():
                return self.rec1()
            rec1_var: list; _result_rec1_var: ParseResult[list]
            _result_rec1_var = _item_rec1_var()
            if not _result_rec1_var: return None
            rec1_var, = _result_rec1_var
            # prim
            def _item_prim_var():
                return self.prim()
            prim_var: Any; _result_prim_var: ParseResult[Any]
            _result_prim_var = _item_prim_var()
            if not _result_prim_var: return None
            prim_var, = _result_prim_var
            # parse succeeded
            return ([rec1_var, prim_var]),
        def _alt_2():
            # prim
            def _item_prim_var():
                return self.prim()
            prim_var: Any; _result_prim_var: ParseResult[Any]
            _result_prim_var = _item_prim_var()
            if not _result_prim_var: return None
            prim_var, = _result_prim_var
            # parse succeeded
            return (prim_var),
        return self._alts(_alt_1, _alt_2)

    def prim(self) -> ParseResult[Any]:
        # prim: (STRING) | (NAME) | (NUMBER)
        def _alt_1():
            # (STRING)
            def _item__rhs_var():
                def _alt():
                    # STRING
                    def _item__string_var():
                        return self._string()
                    _string_var: Token; _result__string_var: ParseResult[Token]
                    _result__string_var = _item__string_var()
                    if not _result__string_var: return None
                    _string_var, = _result__string_var
                    # parse succeeded
                    return ('string'),
                return self._alt(_alt)
            _rhs_var: Any; _result__rhs_var: ParseResult[Any]
            _result__rhs_var = _item__rhs_var()
            if not _result__rhs_var: return None
            _rhs_var, = _result__rhs_var
            # parse succeeded
            return (_rhs_var),
        def _alt_2():
            # (NAME)
            def _item__rhs_var():
                def _alt():
                    # NAME
                    def _item__name_var():
                        return self._name()
                    _name_var: Token; _result__name_var: ParseResult[Token]
                    _result__name_var = _item__name_var()
                    if not _result__name_var: return None
                    _name_var, = _result__name_var
                    # parse succeeded
                    return ('name'),
                return self._alt(_alt)
            _rhs_var: Any; _result__rhs_var: ParseResult[Any]
            _result__rhs_var = _item__rhs_var()
            if not _result__rhs_var: return None
            _rhs_var, = _result__rhs_var
            # parse succeeded
            return (_rhs_var),
        def _alt_3():
            # (NUMBER)
            def _item__rhs_var():
                def _alt():
                    # NUMBER
                    def _item__number_var():
                        return self._number()
                    _number_var: Token; _result__number_var: ParseResult[Token]
                    _result__number_var = _item__number_var()
                    if not _result__number_var: return None
                    _number_var, = _result__number_var
                    # parse succeeded
                    return ('number'),
                return self._alt(_alt)
            _rhs_var: Any; _result__rhs_var: ParseResult[Any]
            _result__rhs_var = _item__rhs_var()
            if not _result__rhs_var: return None
            _rhs_var, = _result__rhs_var
            # parse succeeded
            return (_rhs_var),
        return self._alts(_alt_1, _alt_2, _alt_3)

    KEYWORDS = ()
    SOFT_KEYWORDS = ()


if __name__ == '__main__':
    from pegen.parser import simple_parser_main
    simple_parser_main(GeneratedParser)
