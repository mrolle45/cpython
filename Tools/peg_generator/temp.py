#!/usr/bin/env python3.8
# @generated by pegen from metagrammar.gram

from __future__ import annotations

import ast
import sys
import tokenize

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger, Parser, RuleAltDescr, cut_sentinel
from ast import literal_eval
from itertools import chain
import traceback

from pegen.grammar import (
    Alt,
    Arg,
    Args,
    Cut,
    Forced,
    Gather0,
    Gather1,
    Grammar,
    Group,
    Item,
    Items,
    Lookahead,
    Meta,
    NameLeaf,
    NegativeLookahead,
    Opt,
    Params,
    Plain,
    PositiveLookahead,
    Repeat0,
    Repeat1,
    Rhs,
    Rule,
    StringLeaf,
    VarName,
)

# Keywords and soft keywords are listed at the end of the parser definition.
class GeneratedParser(Parser):

    def self.start() -> Any:
        return self.start()

    def self.grammar() -> Any:
        return self.grammar()

    def self.meta() -> Any:
        return self.meta()

    def self.metavalue() -> Any:
        return self.metavalue()

    def self.rule() -> Any:
        return self.rule()

    def self.params() -> Any:
        return self.params()

    def self.param() -> Any:
        return self.param()

    def self.typed_name() -> Any:
        return self.typed_name()

    def self.memoflag() -> Any:
        return self.memoflag()

    def self.alts() -> Any:
        return self.alts()

    def self.maybe_alts() -> Any:
        return self.maybe_alts()

    def self.more_alts() -> Any:
        return self.more_alts()

    def self.alt() -> Any:
        return self.alt()

    def self.items() -> Any:
        return self.items()

    def self.item() -> Any:
        return self.item()

    def self.atom() -> Any:
        return self.atom()

    def self.primary() -> Any:
        return self.primary()

    def self.action() -> Any:
        return self.action()

    def self.annotation() -> Any:
        return self.annotation()

    def self.arguments() -> Any:
        return self.arguments()

    def self.arg() -> Any:
        return self.arg()

    def self.arg_atom() -> Any:
        return self.arg_atom()

    def self.target_atoms() -> Any:
        return self.target_atoms()

    def self.target_atom() -> Any:
        return self.target_atom()

    KEYWORDS = ()
    SOFT_KEYWORDS = ('memo',)


if __name__ == '__main__':
    from pegen.parser import simple_parser_main
    simple_parser_main(GeneratedParser)
