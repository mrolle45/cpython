// @generated by pegen from test.gram
#include "pegen.h"

#if defined(Py_DEBUG) && defined(Py_BUILD_CORE)
#  define D(x) if (Py_DebugFlag) x;
#else
#  define D(x)
#endif

#ifdef __wasi__
#  define MAXSTACK 4000
#else
#  define MAXSTACK 6000
#endif
from ast import literal_eval

from pegen.grammar import (
    Alt,
    Cut,
    Forced,
    Gather,
    Group,
    Item,
    Lookahead,
    LookaheadOrCut,
    MetaTuple,
    MetaList,
    NameLeaf,
    NamedItem,
    NamedItemList,
    NegativeLookahead,
    Opt,
    Plain,
    PositiveLookahead,
    Repeat0,
    Repeat1,
    Rhs,
    Rule,
    RuleList,
    RuleName,
    RuleParams,
    TypedName,
    Grammar,
    StringLeaf,
)

static const int n_keyword_lists = 0;
static KeywordToken *reserved_keywords[] = {
    (KeywordToken[]) {{NULL, -1}},
};
static char *soft_keywords[] = {
    NULL,
};
#define foo_type 1000
#define bar2_type 1001
#define bar_type 1002

static void *foo_rule(Parser *p);
static list bar2_rule(Parser *p, int x, void * y);
static void *bar_rule(Parser *p);


// foo: bar() | bar (bar) | bar(1,) | bar(1, 2) | bar(1, 2,) | bar
static void *
foo_rule(Parser *p)
{
    if (p->level++ == MAXSTACK) {
        p->error_indicator = 1;
        PyErr_NoMemory();
    }
    if (p->error_indicator) {
        p->level--;
        return NULL;
    }
    void * _res = NULL;
    int _mark = p->mark;
    { // bar()
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> foo[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "bar()"));
        void *bar_var;
        if (
            (bar_var = bar_rule(p))  // bar()
        )
        {
            D(fprintf(stderr, "%*c+ foo[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "bar()"));
            _res = bar_var;
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s foo[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "bar()"));
    }
    { // bar (bar)
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> foo[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "bar (bar)"));
        void *bar_var;
        void *bar_var_1;
        if (
            (bar_var = bar_rule(p))  // bar
            &&
            (bar_var_1 = bar_rule(p))  // bar
        )
        {
            D(fprintf(stderr, "%*c+ foo[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "bar (bar)"));
            _res = _PyPegen_dummy_name(p, bar_var, bar_var_1);
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s foo[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "bar (bar)"));
    }
    { // bar(1,)
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> foo[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "bar(1,)"));
        void *bar_var;
        if (
            (bar_var = bar_rule(p, 1))  // bar(1,)
        )
        {
            D(fprintf(stderr, "%*c+ foo[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "bar(1,)"));
            _res = bar_var;
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s foo[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "bar(1,)"));
    }
    { // bar(1, 2)
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> foo[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "bar(1, 2)"));
        void *bar_var;
        if (
            (bar_var = bar_rule(p, 1, 2))  // bar(1, 2)
        )
        {
            D(fprintf(stderr, "%*c+ foo[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "bar(1, 2)"));
            _res = bar_var;
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s foo[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "bar(1, 2)"));
    }
    { // bar(1, 2,)
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> foo[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "bar(1, 2,)"));
        void *bar_var;
        if (
            (bar_var = bar_rule(p, 1, 2))  // bar(1, 2,)
        )
        {
            D(fprintf(stderr, "%*c+ foo[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "bar(1, 2,)"));
            _res = bar_var;
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s foo[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "bar(1, 2,)"));
    }
    { // bar
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> foo[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "bar"));
        void *bar_var;
        if (
            (bar_var = bar_rule(p))  // bar
        )
        {
            D(fprintf(stderr, "%*c+ foo[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "bar"));
            _res = bar_var;
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s foo[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "bar"));
    }
    _res = NULL;
  done:
    p->level--;
    return _res;
}

// bar2: NAME
static list
bar2_rule(Parser *p, int x, void * y)
{
    if (p->level++ == MAXSTACK) {
        p->error_indicator = 1;
        PyErr_NoMemory();
    }
    if (p->error_indicator) {
        p->level--;
        return NULL;
    }
    list _res = NULL;
    if (_PyPegen_is_memoized(p, bar2_type, &_res)) {
        p->level--;
        return _res;
    }
    int _mark = p->mark;
    { // NAME
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> bar2[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "NAME"));
        expr_ty name_var;
        if (
            (name_var = _PyPegen_name_token(p))  // NAME
        )
        {
            D(fprintf(stderr, "%*c+ bar2[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "NAME"));
            _res = name_var;
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s bar2[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "NAME"));
    }
    _res = NULL;
  done:
    _PyPegen_insert_memo(p, _mark, bar2_type, _res);
    p->level--;
    return _res;
}

// bar: NAME
static void *
bar_rule(Parser *p)
{
    if (p->level++ == MAXSTACK) {
        p->error_indicator = 1;
        PyErr_NoMemory();
    }
    if (p->error_indicator) {
        p->level--;
        return NULL;
    }
    void * _res = NULL;
    if (_PyPegen_is_memoized(p, bar_type, &_res)) {
        p->level--;
        return _res;
    }
    int _mark = p->mark;
    { // NAME
        if (p->error_indicator) {
            p->level--;
            return NULL;
        }
        D(fprintf(stderr, "%*c> bar[%d-%d]: %s\n", p->level, ' ', _mark, p->mark, "NAME"));
        expr_ty name_var;
        if (
            (name_var = _PyPegen_name_token(p))  // NAME
        )
        {
            D(fprintf(stderr, "%*c+ bar[%d-%d]: %s succeeded!\n", p->level, ' ', _mark, p->mark, "NAME"));
            _res = name_var;
            goto done;
        }
        p->mark = _mark;
        D(fprintf(stderr, "%*c%s bar[%d-%d]: %s failed!\n", p->level, ' ',
                  p->error_indicator ? "ERROR!" : "-", _mark, p->mark, "NAME"));
    }
    _res = NULL;
  done:
    _PyPegen_insert_memo(p, _mark, bar_type, _res);
    p->level--;
    return _res;
}
